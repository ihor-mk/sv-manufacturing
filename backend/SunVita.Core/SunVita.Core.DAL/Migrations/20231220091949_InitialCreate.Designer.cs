// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SunVita.Core.DAL.Context;

#nullable disable

namespace SunVita.Core.DAL.Migrations
{
    [DbContext(typeof(SunVitaCoreContext))]
    [Migration("20231220091949_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SunVita.Core.DAL.Entities.DoneTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayPart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("NomenclatureId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductionLineId")
                        .HasColumnType("bigint");

                    b.Property<double>("Productivity")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StringNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WorkDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("DoneTasks");
                });

            modelBuilder.Entity("SunVita.Core.DAL.Entities.DoneTaskEmployee", b =>
                {
                    b.Property<long>("DoneTaskId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.HasKey("DoneTaskId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DoneTaskEmployee");
                });

            modelBuilder.Entity("SunVita.Core.DAL.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SunVita.Core.DAL.Entities.Nomenclature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NomenclatureInBox")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nomenclatures");
                });

            modelBuilder.Entity("SunVita.Core.DAL.Entities.ProductionLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductivityAvg")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductionLines");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "000000040",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 19, 49, 737, DateTimeKind.Local).AddTicks(7696),
                            IpAddress = "10.61.2.23",
                            ProductivityAvg = 26.800000000000001,
                            Title = "Цех №1 (Лінія 1)"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "000000009",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 19, 49, 737, DateTimeKind.Local).AddTicks(7709),
                            IpAddress = "10.61.2.22",
                            ProductivityAvg = 44.600000000000001,
                            Title = "Цех №2 (Лінія 1)"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "000000010",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 19, 49, 737, DateTimeKind.Local).AddTicks(7714),
                            IpAddress = "10.61.2.21",
                            ProductivityAvg = 50.0,
                            Title = "Цех №2 (Лінія 2)"
                        },
                        new
                        {
                            Id = 4L,
                            Code = "000000008",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 19, 49, 737, DateTimeKind.Local).AddTicks(7720),
                            IpAddress = "10.61.2.22",
                            ProductivityAvg = 51.700000000000003,
                            Title = "Цех №4 (Лінія 1, кросфолд 1)"
                        },
                        new
                        {
                            Id = 5L,
                            Code = "000000047",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 19, 49, 737, DateTimeKind.Local).AddTicks(7725),
                            IpAddress = "10.61.2.23",
                            ProductivityAvg = 62.5,
                            Title = "Цех №5 (Лінія 1)"
                        },
                        new
                        {
                            Id = 6L,
                            Code = "000000026",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 19, 49, 737, DateTimeKind.Local).AddTicks(7736),
                            IpAddress = "10.61.2.23",
                            ProductivityAvg = 66.099999999999994,
                            Title = "Цех №5 (Лінія 2, кросфолд 2)"
                        },
                        new
                        {
                            Id = 7L,
                            Code = "000000048",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 19, 49, 737, DateTimeKind.Local).AddTicks(7742),
                            IpAddress = "10.61.2.21",
                            ProductivityAvg = 62.5,
                            Title = "Цех №5 (Лінія 3)"
                        });
                });

            modelBuilder.Entity("SunVita.Core.DAL.Entities.DoneTask", b =>
                {
                    b.HasOne("SunVita.Core.DAL.Entities.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SunVita.Core.DAL.Entities.ProductionLine", "ProductionLine")
                        .WithMany()
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("SunVita.Core.DAL.Entities.DoneTaskEmployee", b =>
                {
                    b.HasOne("SunVita.Core.DAL.Entities.DoneTask", null)
                        .WithMany()
                        .HasForeignKey("DoneTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SunVita.Core.DAL.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
